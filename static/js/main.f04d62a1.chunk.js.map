{"version":3,"sources":["components/StartPage.js","components/ChampCheckBox.js","components/DisplayedChampions.js","components/MainPage.js","components/AbilityInfo.js","components/ChampDetailed.js","App.js","serviceWorker.js","index.js"],"names":["StartPage","keyUpHandler","e","preventDefault","keyCode","props","buttonClick","className","onClick","this","tabIndex","onKeyUp","Component","ChampCheckBox","userClick","state","isChecked","userSelectClassType","champType","userUnselectClassType","setState","type","htmlFor","index","src","url","alt","name","id","value","DisplayedChampions","clickHandler","userSelectedChampion","target","filteredChampions","map","champ","key","href","options","max","process","title","MySwal","withReactContent","Swal","MainPage","creatingClasses","classesArray","classType","newSelection","userSelection","push","filter","userConfirmClassSelect","filterChampionsToDisplay","championsToDisplay","scrollAfterDisplay","window","scrollTo","displayChampRef","current","offsetTop","champsToFilter","champsTest","selection","tags","includes","checkIfArrayIsEmpty","length","hasUserMadeSelection","fire","icon","text","champions","availableClasses","React","createRef","action","onSubmit","ref","AbilityInfo","abilityInfo","ChampDetailed","toggleHoverState","isHovering","handleMouseHover","champPassive","description","champDetails","champSpell0","champSpell1","champSpell2","champSpell3","champPassiveImg","champSpell0Img","champSpell1Img","champSpell2Img","champSpell3Img","axios","selectedChamp","method","responseType","then","res","data","passive","spells","image","full","lore","onMouseEnter","onMouseLeave","onFocus","onBlur","App","isMainPage","isChampDetailPage","startPageHandleClick","isStartPage","fullChampions","championsArray","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+TAwBeA,E,2MApBbC,aAAe,SAAAC,GACbA,EAAEC,iBACgB,KAAdD,EAAEE,SACJ,EAAKC,MAAMC,e,wEAKb,OACE,yBAAKC,UAAU,aACb,sDACA,sFACA,4BAAQC,QAASC,KAAKJ,MAAMC,YAAaI,SAAS,IAAIC,QAASF,KAAKR,cAApE,c,GAdgBW,aCqCTC,E,YApCb,WAAYR,GAAQ,IAAD,8BACjB,4CAAMA,KAORS,UAAY,WACN,EAAKC,MAAMC,UACb,EAAKX,MAAMY,oBAAoB,EAAKF,MAAMG,WAE1C,EAAKb,MAAMc,sBAAsB,EAAKJ,MAAMG,WAE9C,EAAKE,SAAS,CACZJ,WAAY,EAAKD,MAAMC,aAfR,EAmBnBf,aAAe,SAACC,GACI,KAAdA,EAAEE,SACJ,EAAKU,aAnBP,EAAKC,MAAQ,CACXG,UAAW,EAAKb,MAAMgB,KACtBL,WAAW,GAJI,E,sEAyBjB,OACE,2BAAOM,QAAO,kBAAab,KAAKJ,MAAMkB,OAASb,SAAS,IAAIC,QAASF,KAAKR,cACxE,yBAAKM,WAAkC,IAAvBE,KAAKM,MAAMC,UAAmB,YAAY,WAA1D,KACA,4BAAKP,KAAKM,MAAMG,WAChB,yBAAKM,IAAKf,KAAKJ,MAAMoB,IAAKC,IAAG,mBAAcjB,KAAKM,MAAMG,UAAzB,YAC7B,2BAAOG,KAAK,WAAWM,KAAI,kBAAalB,KAAKJ,MAAMkB,OAASK,GAAE,kBAAanB,KAAKJ,MAAMkB,OAASM,MAAOpB,KAAKM,MAAMG,UAAWV,QAASC,KAAKK,iB,GA/BtHF,a,mDCoCbkB,E,2MAjCbC,aAAe,SAAC7B,GACdA,EAAEC,iBACF,EAAKE,MAAM2B,qBAAqB9B,EAAE+B,OAAOL,K,EAG3C3B,aAAe,SAACC,GACI,KAAdA,EAAEE,SACJ,EAAK2B,aAAa7B,I,wEAIZ,IAAD,OACP,OACE,yBAAKK,UAAU,sBAEXE,KAAKJ,MAAM6B,kBAAkBC,KAAI,SAACC,EAAOb,GACvC,OACE,yBAAKhB,UAAS,mBAAc6B,EAAMR,IAAMS,IAAKd,EAAOf,QAAS,EAAKuB,aAAcH,GAAIQ,EAAMR,GAAIlB,SAAS,IAAIC,QAAS,EAAKV,cACvH,uBAAGqC,KAAK,IAAIV,GAAIQ,EAAMR,IACpB,wBAAIA,GAAIQ,EAAMR,IAAKQ,EAAMT,MACzB,kBAAC,IAAD,CAAMpB,UAAU,OAAOgC,QAAS,CAAEC,IAAK,KACrC,yBAAKhB,IAAKiB,aAAA,2BAA6CL,EAAMR,GAAnD,UAA+DF,IAAG,UAAKU,EAAMR,GAAX,aAAkBQ,EAAMM,OAASnC,UAAU,QAAQqB,GAAIQ,EAAMR,gB,GAvB5HhB,aCI3B+B,EAASC,IAAiBC,KAyGjBC,E,YAtGb,WAAYzC,GAAQ,IAAD,8BACjB,4CAAMA,KAYR0C,gBAAkB,SAAAC,GAIhB,OAHeA,EAAab,KAAI,SAACjB,EAAWK,GAC1C,OAAO,kBAAC,EAAD,CAAec,IAAKd,EAAOF,KAAMH,EAAWO,IAAKgB,aAAA,kBAAoCvB,EAApC,QAAqDD,oBAAqB,EAAKA,oBAAqBE,sBAAuB,EAAKA,sBAAuBI,MAAOA,EAAQ,QAf/M,EAoBnBN,oBAAsB,SAAAgC,GACpB,IAAMC,EAAe,EAAKnC,MAAMoC,cAChCD,EAAaE,KAAKH,GAClB,EAAK7B,SAAS,CACZ+B,cAAeD,KAxBA,EA4BnB/B,sBAAwB,SAAA8B,GACtB,IACMC,EADe,EAAKnC,MAAMoC,cACEE,QAAO,SAAAnC,GACvC,OAAOA,IAAc+B,KAEvB,EAAK7B,SAAS,CACZ+B,cAAeD,KAlCA,EAsCnBI,uBAAyB,SAAApD,GACvBA,EAAEC,iBACF,EAAKoD,yBAAyB,EAAKxC,MAAMoC,cAAe,EAAKpC,MAAMyC,qBAxClD,EA2CnBC,mBAAqB,WACjBC,OAAOC,SAAS,EAAG,EAAKC,gBAAgBC,QAAQC,YA5CjC,EA+CnBP,yBAA2B,SAACJ,EAAeY,GACzC,IAAMC,EAAaD,EAAeV,QAAO,SAAAjB,GAAU,IAAD,uBAChD,YAAsBe,EAAtB,+CAAqC,CAAC,IAA7Bc,EAA4B,QACnC,IAAK7B,EAAM8B,KAAKC,SAASF,GACvB,OAAO,GAHqC,kFAMhD,OAAO,KAET,EAAK7C,SACH,CACEc,kBAAmB8B,GAErB,EAAKI,sBA5DU,EAgEnBA,oBAAsB,WACf,EAAKrD,MAAMmB,kBAAkBmC,OAOhC,EAAKjD,SAAS,CACZkD,sBAAsB,GACrB,EAAKb,oBARRd,EAAO4B,KAAK,CACVC,KAAM,QACN9B,MAAO,aACP+B,KAAM,0MAnEV,EAAK1D,MAAQ,CACXyC,mBAAoB,EAAKnD,MAAMqE,UAC/BxC,kBAAmB,GACnBiB,cAAe,GACfwB,iBAAkB,CAAC,UAAW,OAAQ,OAAQ,WAAY,UAAW,YACrEL,sBAAsB,EACtBtC,qBAAsB,EAAK3B,MAAM2B,sBAEnC,EAAK4B,gBAAkBgB,IAAMC,YAVZ,E,sEA+EjB,OACE,0BAAMtE,UAAU,YACd,yBAAKA,UAAU,WACb,sDACA,kEACA,wFACA,0BAAMuE,OAAO,SAASvE,UAAU,cAAcwE,SAAUtE,KAAK6C,wBAC1D7C,KAAKsC,gBAAgBtC,KAAKM,MAAM4D,kBACjC,4BAAQjE,SAAS,KAAjB,sBAEF,yBAAKsE,IAAKvE,KAAKmD,iBACZnD,KAAKM,MAAMuD,qBACV,kBAAC,EAAD,CACEpC,kBAAmBzB,KAAKM,MAAMmB,kBAAmBN,GAAG,qBAAqBI,qBAAsBvB,KAAKM,MAAMiB,uBAE5G,Y,GA/FSpB,aCGRqE,E,iLARX,OACE,6BACE,wBAAI1E,UAAU,eAAeE,KAAKJ,MAAM6E,kB,GAJtBtE,aCqGXuE,E,YAjGb,aAAe,IAAD,8BACZ,+CAyCFC,iBAAmB,WACjB,EAAKhE,SAAS,CACZiE,YAAa,EAAKtE,MAAMsE,cA5Cd,EAiDdC,iBAAmB,SAAApF,GACjBA,EAAEC,iBACF,EAAKiF,mBACa,YAAdlF,EAAE+B,OAAOL,GACX,EAAKR,SAAS,CACZ8D,YAAa,EAAKnE,MAAMwE,aAAa5D,OAGvC,EAAKP,SAAS,CACZ8D,YAAa,EAAKnE,MAAMb,EAAE+B,OAAOL,IAAI4D,eAxDzC,EAAKzE,MAAM,CACT0E,aAAa,GACbF,aAAa,GACbG,YAAY,GACZC,YAAY,GACZC,YAAY,GACZC,YAAY,GACZR,YAAY,EACZH,YAAa,GACbY,gBAAgB,GAChBC,eAAe,GACfC,eAAe,GACfC,eAAe,GACfC,eAAe,IAfL,E,iFAkBO,IAAD,OAElBC,IAAM,CACJ1E,IAAI,qEAAD,OAAuEhB,KAAKJ,MAAM+F,cAAlF,SACHC,OAAQ,MACRC,aAAc,SACbC,MAAK,SAAAC,GACN,EAAKpF,SAAS,CACZqE,aAAce,EAAIC,KAAKA,KAAK,EAAKpG,MAAM+F,eACvCb,aAAciB,EAAIC,KAAKA,KAAK,EAAKpG,MAAM+F,eAAeM,QACtDhB,YAAac,EAAIC,KAAKA,KAAK,EAAKpG,MAAM+F,eAAeO,OAAO,GAC5DhB,YAAaa,EAAIC,KAAKA,KAAK,EAAKpG,MAAM+F,eAAeO,OAAO,GAC5Df,YAAaY,EAAIC,KAAKA,KAAK,EAAKpG,MAAM+F,eAAeO,OAAO,GAC5Dd,YAAaW,EAAIC,KAAKA,KAAK,EAAKpG,MAAM+F,eAAeO,OAAO,GAC5Db,gBAAiBU,EAAIC,KAAKA,KAAK,EAAKpG,MAAM+F,eAAeM,QAAQE,MAAMC,KACvEd,eAAeS,EAAIC,KAAKA,KAAK,EAAKpG,MAAM+F,eAAeO,OAAO,GAAGC,MAAMC,KACvEb,eAAeQ,EAAIC,KAAKA,KAAK,EAAKpG,MAAM+F,eAAeO,OAAO,GAAGC,MAAMC,KACvEZ,eAAeO,EAAIC,KAAKA,KAAK,EAAKpG,MAAM+F,eAAeO,OAAO,GAAGC,MAAMC,KACvEX,eAAeM,EAAIC,KAAKA,KAAK,EAAKpG,MAAM+F,eAAeO,OAAO,GAAGC,MAAMC,Y,+BA2B3E,OAASpG,KAAKM,MAAM0E,cAClB,yBAAKlF,UAAU,iBACb,wBAAIA,UAAU,iBAAd,0BACA,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,WACb,4BAAKE,KAAKM,MAAM0E,aAAa9D,MAC7B,4BAAKlB,KAAKM,MAAM0E,aAAa/C,OAC7B,2BAAIjC,KAAKM,MAAM0E,aAAaqB,OAE9B,yBAAKtF,IAAG,sEAAiEf,KAAKM,MAAM0E,aAAa7D,GAAzF,UAAqGF,IAAG,UAAKjB,KAAKM,MAAM0E,aAAa9D,KAA7B,aAAsClB,KAAKM,MAAM0E,aAAa/C,UAEhL,yBAAKnC,UAAU,aACb,8DACA,2CACA,yBAAKA,UAAU,SAEb,yBAAKiB,IAAG,oEAA+Df,KAAKM,MAAM+E,iBAAmBpE,IAAG,yBAAoBjB,KAAKM,MAAM0E,aAAa9D,KAA5C,aAAqDlB,KAAKM,MAAMwE,aAAa5D,MAAQC,GAAG,UAAUmF,aAActG,KAAK6E,iBAAkB0B,aAAcvG,KAAK6E,iBAAkB5E,SAAS,IAAIuG,QAASxG,KAAK6E,iBAAkB4B,OAAQzG,KAAK6E,mBAC9U,yBAAK9D,IAAG,kEAA6Df,KAAKM,MAAMgF,gBAAkBrE,IAAG,2BAAsBjB,KAAKM,MAAM0E,aAAa9D,KAA9C,aAAuDlB,KAAKM,MAAM2E,YAAY/D,MAAQC,GAAG,cAAcmF,aAActG,KAAK6E,iBAAkB0B,aAAcvG,KAAK6E,iBAAkB5E,SAAS,IAAIuG,QAASxG,KAAK6E,iBAAkB4B,OAAQzG,KAAK6E,mBAChV,yBAAK9D,IAAG,kEAA6Df,KAAKM,MAAMiF,gBAAkBtE,IAAG,4BAAuBjB,KAAKM,MAAM0E,aAAa9D,KAA/C,aAAwDlB,KAAKM,MAAM4E,YAAYhE,MAAQC,GAAG,cAAcmF,aAActG,KAAK6E,iBAAkB0B,aAAcvG,KAAK6E,iBAAkB5E,SAAS,IAAIuG,QAASxG,KAAK6E,iBAAkB4B,OAAQzG,KAAK6E,mBACjV,yBAAK9D,IAAG,kEAA6Df,KAAKM,MAAMkF,gBAAkBvE,IAAG,2BAAsBjB,KAAKM,MAAM0E,aAAa9D,KAA9C,aAAuDlB,KAAKM,MAAM6E,YAAYjE,MAAQC,GAAG,cAAcmF,aAActG,KAAK6E,iBAAkB0B,aAAcvG,KAAK6E,iBAAkB5E,SAAS,IAAIuG,QAASxG,KAAK6E,iBAAkB4B,OAAQzG,KAAK6E,mBAChV,yBAAK9D,IAAG,kEAA6Df,KAAKM,MAAMmF,gBAAkBxE,IAAG,8BAAyBjB,KAAKM,MAAM0E,aAAa9D,KAAjD,aAA0DlB,KAAKM,MAAM8E,YAAYlE,MAAQC,GAAG,cAAcmF,aAActG,KAAK6E,iBAAkB0B,aAAcvG,KAAK6E,iBAAmB5E,SAAS,IAAIuG,QAASxG,KAAK6E,iBAAkB4B,OAAQzG,KAAK6E,oBAEtV,yBAAK/E,UAAU,eAEXE,KAAKM,MAAMsE,YACX,kBAAC,EAAD,CAAaH,YAAazE,KAAKM,MAAMmE,qB,GAzFvBtE,aC4DbuG,E,YAxDb,aAAe,IAAD,8BACZ,+CA4BFnF,qBAAuB,SAACmB,GACtB,EAAK/B,SAAS,CACZgG,YAAa,EAAKrG,MAAMqG,WACxBC,mBAAmB,EAAKtG,MAAMsG,kBAC9BjB,cAAcjD,KAjCJ,EAqCdmE,qBAAuB,WACrB,EAAKlG,SAAS,CACZmG,aAAc,EAAKxG,MAAMwG,YACzBH,YAAa,EAAKrG,MAAMqG,cAtC1B,EAAKrG,MAAQ,CACXyG,cAAc,GACdhE,mBAAmB,GACnB+D,aAAa,EACbH,YAAY,EACZC,mBAAkB,EAClBjB,cAAc,IARJ,E,iFAWO,IAAD,OAElBD,IAAM,CACJ1E,IAAK,yEACL4E,OAAQ,MACRC,aAAc,SACbC,MAAK,SAAAC,GACN,IAAMiB,EAAiB,GACvB,IAAK,IAAIpF,KAAOmE,EAAIC,KAAKA,KACvBgB,EAAerE,KAAKoD,EAAIC,KAAKA,KAAKpE,IAEpC,EAAKjB,SAAS,CACZoG,cAAeC,EACfjE,mBAAoBiE,S,+BAoBxB,OACE,yBAAKlH,UAAU,OACb,yBAAKA,UAAU,WACZE,KAAKM,MAAMwG,YAAc,kBAAC,EAAD,CAAWjH,YAAaG,KAAK6G,uBAA2B,KACjF7G,KAAKM,MAAMqG,WAAa,kBAAC,EAAD,CAAW1C,UAAWjE,KAAKM,MAAMyC,mBAAoBxB,qBAAsBvB,KAAKuB,uBAA0B,KAClIvB,KAAKM,MAAMsG,kBAAoB,kBAAC,EAAD,CAAejB,cAAe3F,KAAKM,MAAMqF,gBAAmB,W,GAlDpFxF,aCIE8G,QACW,cAA7BhE,OAAOiE,SAASC,UAEe,UAA7BlE,OAAOiE,SAASC,UAEhBlE,OAAOiE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f04d62a1.chunk.js","sourcesContent":["import React ,{Component} from 'react';\r\n\r\nclass StartPage extends Component {\r\n  //this allows the user to confirm leaving the landing page using tab and enter keys\r\n  keyUpHandler = e => {\r\n    e.preventDefault();\r\n    if (e.keyCode === 13) {\r\n      this.props.buttonClick();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"startPage\">\r\n        <h1>Champion Select Helper</h1>\r\n        <h2>For your League of Legends champion select convenience</h2>\r\n        <button onClick={this.props.buttonClick} tabIndex=\"1\" onKeyUp={this.keyUpHandler}>\r\n          Start\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StartPage;","import React, { Component } from 'react';\r\n\r\nclass ChampCheckBox extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      champType: this.props.type,\r\n      isChecked: true,\r\n    }\r\n  }\r\n  // This function helps decide whether to add or remove the user champion class selection from the user selection array on the MainPage component with two functions passed down from there.\r\n  userClick = () => {\r\n    if (this.state.isChecked) {\r\n      this.props.userSelectClassType(this.state.champType);\r\n    } else {\r\n      this.props.userUnselectClassType(this.state.champType);\r\n    }\r\n    this.setState({\r\n      isChecked: !this.state.isChecked,\r\n    })\r\n  }\r\n  // This function allows the user to make their champion class selection using the enter and tab keys\r\n  keyUpHandler = (e) => {\r\n    if (e.keyCode === 13) {\r\n      this.userClick();\r\n    } \r\n  }\r\n  render() {\r\n    return (\r\n      <label htmlFor={`checkbox${this.props.index}`} tabIndex=\"0\" onKeyUp={this.keyUpHandler}>\r\n        <div className={this.state.isChecked===true ? \"unclicked\":\"clicked\"}> </div>\r\n        <h3>{this.state.champType}</h3>\r\n        <img src={this.props.url} alt={`icon for ${this.state.champType} class`} />\r\n        <input type=\"checkbox\" name={`checkbox${this.props.index}`} id={`checkbox${this.props.index}`} value={this.state.champType} onClick={this.userClick} />\r\n      </label>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChampCheckBox;","import React, {Component} from 'react';\r\nimport Tilt from \"react-tilt\";\r\n\r\nclass DisplayedChampions extends Component {\r\n  // this tracks which champion the user is selecting\r\n  clickHandler = (e) => {\r\n    e.preventDefault();\r\n    this.props.userSelectedChampion(e.target.id)\r\n  }\r\n  //this allows the user to select champions using tab and confirm by using the enter key\r\n  keyUpHandler = (e) => {\r\n    if (e.keyCode === 13) {\r\n      this.clickHandler(e);\r\n    } \r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"displayedChampions\">\r\n        {\r\n          this.props.filteredChampions.map((champ, index)=>{\r\n            return (\r\n              <div className={`champBox ${champ.id}`} key={index} onClick={this.clickHandler} id={champ.id} tabIndex=\"0\" onKeyUp={this.keyUpHandler}>\r\n                <a href=\"#\" id={champ.id}>\r\n                  <h2 id={champ.id}>{champ.name}</h2>\r\n                  <Tilt className=\"Tilt\" options={{ max: 35 }}>\r\n                    <img src={process.env.PUBLIC_URL + `/assets/champImg/${champ.id}_0.jpg`} alt={`${champ.id}, ${champ.title}`} className=\"champ\" id={champ.id} />\r\n                  </Tilt>\r\n                </a>\r\n              </div>\r\n            );\r\n          })\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DisplayedChampions;","import React, { Component } from 'react';\r\n\r\nimport ChampCheckBox from \"../components/ChampCheckBox\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nimport DisplayedChampions from \"../components/DisplayedChampions\"\r\n\r\nconst MySwal = withReactContent(Swal);\r\n\r\nclass MainPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      championsToDisplay: this.props.champions,\r\n      filteredChampions: [],\r\n      userSelection: [],\r\n      availableClasses: [\"Fighter\", \"Tank\", \"Mage\", \"Assassin\", \"Support\", \"Marksman\"],\r\n      hasUserMadeSelection: false,\r\n      userSelectedChampion: this.props.userSelectedChampion\r\n    };\r\n    this.displayChampRef = React.createRef();\r\n  }\r\n  // using the map method to dynamically generate user choices based on choices available, this is for flexibility purposes in case riot adds a new champion class or takes one away\r\n  creatingClasses = classesArray => {\r\n    let jsxToAdd = classesArray.map((champType, index) => {\r\n      return <ChampCheckBox key={index} type={champType} url={process.env.PUBLIC_URL + `/assets/${champType}.png`} userSelectClassType={this.userSelectClassType} userUnselectClassType={this.userUnselectClassType} index={index + 1} />;\r\n    });\r\n    return jsxToAdd;\r\n  };\r\n  //function to add the class selection to an array stored in the state which is passed down to the ChampCheckBox component\r\n  userSelectClassType = classType => {\r\n    const newSelection = this.state.userSelection;\r\n    newSelection.push(classType);\r\n    this.setState({\r\n      userSelection: newSelection\r\n    });\r\n  };\r\n  //function to delete a class selection from the array stored in the state which is passed down to the ChampCheckBox component\r\n  userUnselectClassType = classType => {\r\n    const oldSelection = this.state.userSelection;\r\n    const newSelection = oldSelection.filter(champType => {\r\n      return champType !== classType;\r\n    });\r\n    this.setState({\r\n      userSelection: newSelection\r\n    });\r\n  };\r\n  //function that runs when the user confirms their champion class selection\r\n  userConfirmClassSelect = e => {\r\n    e.preventDefault();\r\n    this.filterChampionsToDisplay(this.state.userSelection, this.state.championsToDisplay);\r\n  };\r\n  //A function that scrolls down after the some champions are displayed based on the user champion class selection\r\n  scrollAfterDisplay = () => {\r\n      window.scrollTo(0, this.displayChampRef.current.offsetTop);\r\n  };\r\n  //The function that filters down the array of all champions to an array of champions that fits the user's selection\r\n  filterChampionsToDisplay = (userSelection, champsToFilter) => {\r\n    const champsTest = champsToFilter.filter(champ => {\r\n      for (let selection of userSelection) {\r\n        if (!champ.tags.includes(selection)) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n    this.setState(\r\n      {\r\n        filteredChampions: champsTest\r\n      },\r\n      this.checkIfArrayIsEmpty\r\n    );\r\n  };\r\n  //function that fires a warning if the filtered down champions array is empty, if it's not empty, switch the state which allows the displaying of champions on the page to the user\r\n  checkIfArrayIsEmpty = () => {\r\n    if (!this.state.filteredChampions.length) {\r\n      MySwal.fire({\r\n        icon: \"error\",\r\n        title: \"Attention!\",\r\n        text: \"After looking through all 148 champions, we have found ZERO champions that matched your selection, that's right, ZERO. Please refine your search parameters and remember to select to a maximum of 2\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        hasUserMadeSelection: true\r\n      }, this.scrollAfterDisplay);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <main className=\"mainPage\">\r\n        <div className=\"wrapper\">\r\n          <h1>Champion Select Helper</h1>\r\n          <p>Note: Select up to two class types!</p>\r\n          <p>Select nothing if you just want to see all the Champions!</p>\r\n          <form action=\"submit\" className=\"classSelect\" onSubmit={this.userConfirmClassSelect}>\r\n            {this.creatingClasses(this.state.availableClasses)}\r\n            <button tabIndex=\"0\">Confirm Selection</button>\r\n          </form>\r\n          <div ref={this.displayChampRef}>\r\n            {this.state.hasUserMadeSelection ? (\r\n              <DisplayedChampions \r\n                filteredChampions={this.state.filteredChampions} id=\"displayedChampions\" userSelectedChampion={this.state.userSelectedChampion}/>) \r\n            : \r\n              null}\r\n          </div>\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainPage;","import React, { Component } from 'react';\r\n\r\nclass AbilityInfo extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3 className=\"abilityInfo\">{this.props.abilityInfo}</h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AbilityInfo;","import React, {Component} from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport AbilityInfo from \"./AbilityInfo\"\r\n\r\nclass ChampDetailed extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state={\r\n      champDetails:{},\r\n      champPassive:{},\r\n      champSpell0:{},\r\n      champSpell1:{},\r\n      champSpell2:{},\r\n      champSpell3:{},\r\n      isHovering: false,\r\n      abilityInfo: \"\",\r\n      champPassiveImg:\"\",\r\n      champSpell0Img:\"\",\r\n      champSpell1Img:\"\",\r\n      champSpell2Img:\"\",\r\n      champSpell3Img:\"\",\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    // based on the user champion selection passed down, a detailed champion object is stored in the state\r\n    axios({\r\n      url: `http://ddragon.leagueoflegends.com/cdn/10.4.1/data/en_US/champion/${this.props.selectedChamp}.json`,\r\n      method: \"GET\",\r\n      responseType: \"json\"\r\n    }).then(res => {\r\n      this.setState({\r\n        champDetails: res.data.data[this.props.selectedChamp],\r\n        champPassive: res.data.data[this.props.selectedChamp].passive,\r\n        champSpell0: res.data.data[this.props.selectedChamp].spells[0],\r\n        champSpell1: res.data.data[this.props.selectedChamp].spells[1],\r\n        champSpell2: res.data.data[this.props.selectedChamp].spells[2],\r\n        champSpell3: res.data.data[this.props.selectedChamp].spells[3],\r\n        champPassiveImg: res.data.data[this.props.selectedChamp].passive.image.full,\r\n        champSpell0Img:res.data.data[this.props.selectedChamp].spells[0].image.full,\r\n        champSpell1Img:res.data.data[this.props.selectedChamp].spells[1].image.full,\r\n        champSpell2Img:res.data.data[this.props.selectedChamp].spells[2].image.full,\r\n        champSpell3Img:res.data.data[this.props.selectedChamp].spells[3].image.full,\r\n      });\r\n    })\r\n  }\r\n\r\n  // this tracks whether the user's mouse is hovering over an icon or not by changing a state\r\n  toggleHoverState = () => {\r\n    this.setState({\r\n      isHovering: !this.state.isHovering\r\n    })\r\n  }\r\n\r\n  // this function stores the information to be displayed to the user based on which icon they hover or focus over.\r\n  handleMouseHover = e => {\r\n    e.preventDefault();\r\n    this.toggleHoverState();\r\n    if (e.target.id===\"passive\") {\r\n      this.setState({\r\n        abilityInfo: this.state.champPassive.name\r\n      })\r\n    } else {\r\n      this.setState({\r\n        abilityInfo: this.state[e.target.id].description\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    return ( this.state.champDetails && \r\n      <div className=\"champDetailed\">\r\n        <h1 className=\"champDetailed\">Champion Select Helper</h1>\r\n        <div className=\"textAndImgContainer\">\r\n          <div className=\"textBox\">\r\n            <h2>{this.state.champDetails.name}</h2>\r\n            <h3>{this.state.champDetails.title}</h3>\r\n            <p>{this.state.champDetails.lore}</p>\r\n          </div>\r\n          <img src={`https://ddragon.leagueoflegends.com/cdn/img/champion/splash/${this.state.champDetails.id}_0.jpg`} alt={`${this.state.champDetails.name}, ${this.state.champDetails.title}`} />\r\n        </div>\r\n        <div className=\"abilities\">\r\n          <h2>Champion Passive and Abilities</h2>\r\n          <h3>Touch me!!!</h3>\r\n          <div className=\"icons\">\r\n            {/* Sorry that I didn't make these into components. I decided to add this detailed champion description page on the last day and just kind of rushed through it */}\r\n            <img src={`http://ddragon.leagueoflegends.com/cdn/10.4.1/img/passive/${this.state.champPassiveImg}`} alt={`The passive of ${this.state.champDetails.name}, ${this.state.champPassive.name}`} id=\"passive\" onMouseEnter={this.handleMouseHover} onMouseLeave={this.handleMouseHover} tabIndex=\"0\" onFocus={this.handleMouseHover} onBlur={this.handleMouseHover}/>\r\n            <img src={`http://ddragon.leagueoflegends.com/cdn/10.4.1/img/spell/${this.state.champSpell0Img}`} alt={`First ability of ${this.state.champDetails.name}, ${this.state.champSpell0.name}`} id=\"champSpell0\" onMouseEnter={this.handleMouseHover} onMouseLeave={this.handleMouseHover} tabIndex=\"0\" onFocus={this.handleMouseHover} onBlur={this.handleMouseHover}/>\r\n            <img src={`http://ddragon.leagueoflegends.com/cdn/10.4.1/img/spell/${this.state.champSpell1Img}`} alt={`Second ability of ${this.state.champDetails.name}, ${this.state.champSpell1.name}`} id=\"champSpell1\" onMouseEnter={this.handleMouseHover} onMouseLeave={this.handleMouseHover} tabIndex=\"0\" onFocus={this.handleMouseHover} onBlur={this.handleMouseHover}/>\r\n            <img src={`http://ddragon.leagueoflegends.com/cdn/10.4.1/img/spell/${this.state.champSpell2Img}`} alt={`Third ability of ${this.state.champDetails.name}, ${this.state.champSpell2.name}`} id=\"champSpell2\" onMouseEnter={this.handleMouseHover} onMouseLeave={this.handleMouseHover} tabIndex=\"0\" onFocus={this.handleMouseHover} onBlur={this.handleMouseHover}/>\r\n            <img src={`http://ddragon.leagueoflegends.com/cdn/10.4.1/img/spell/${this.state.champSpell3Img}`} alt={`Ultimate ability of ${this.state.champDetails.name}, ${this.state.champSpell3.name}`} id=\"champSpell3\" onMouseEnter={this.handleMouseHover} onMouseLeave={this.handleMouseHover}  tabIndex=\"0\" onFocus={this.handleMouseHover} onBlur={this.handleMouseHover}/>\r\n          </div>\r\n          <div className=\"abilityInfo\">\r\n            {\r\n              this.state.isHovering &&\r\n              <AbilityInfo abilityInfo={this.state.abilityInfo}/>\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChampDetailed","import React, { Component } from 'react';\nimport './App.css';\n\nimport axios from \"axios\";\nimport StartPage from \"./components/StartPage\"\nimport MainPage from \"./components/MainPage\";\nimport ChampDetailed from \"./components/ChampDetailed\"\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      fullChampions:[],\n      championsToDisplay:[],\n      isStartPage: true,\n      isMainPage: false,\n      isChampDetailPage:false,\n      selectedChamp:\"\",\n    }\n  }\n  componentDidMount() {\n    // storing a list of all league of legends champions in state\n    axios({\n      url: \"http://ddragon.leagueoflegends.com/cdn/10.4.1/data/en_US/champion.json\",\n      method: \"GET\",\n      responseType: \"json\"\n    }).then(res => {\n      const championsArray = []\n      for (let key in res.data.data) {\n        championsArray.push(res.data.data[key]);\n      }\n      this.setState({\n        fullChampions: championsArray,\n        championsToDisplay: championsArray,\n      });\n    });\n  }\n  // function that is passed down to the component to store which champion the user selects to display to them a more detailed description of the champion. The champion selection is then stored in state and passed down to the ChampDetailed component\n  userSelectedChampion = (userSelection) => {\n    this.setState({\n      isMainPage: !this.state.isMainPage,\n      isChampDetailPage:!this.state.isChampDetailPage,\n      selectedChamp:userSelection\n    })\n  }\n  //function to switch from the landing page to the page where the user can make selections\n  startPageHandleClick = () => {\n    this.setState({\n      isStartPage: !this.state.isStartPage,\n      isMainPage: !this.state.isMainPage,\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          {this.state.isStartPage ? <StartPage buttonClick={this.startPageHandleClick} /> : null}\n          {this.state.isMainPage ? <MainPage  champions={this.state.championsToDisplay} userSelectedChampion={this.userSelectedChampion}/> : null}\n          {this.state.isChampDetailPage ? <ChampDetailed selectedChamp={this.state.selectedChamp}/> : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}